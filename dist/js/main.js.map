{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/js/computer-factory.js",
    "src/js/game-factory.js",
    "src/js/main.js",
    "src/js/outcome-decorator-factory.js",
    "src/js/symbol/comparator/errors.js",
    "src/js/symbol/comparator/factory.js",
    "src/js/symbol/definition/errors.js",
    "src/js/symbol/definition/validator.js",
    "src/js/symbol/finder-factory.js",
    "src/js/symbol/list/errors.js",
    "src/js/symbol/list/validator.js",
    "src/js/symbol/symbol.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\n\n//TODO: replace Math.random() with injectable shuffler\n//\n//\t\tMath.random() makes the matching unit test semi-predictible\n//\n//\t\tcan be fixed via injecting a shuffler and use a predictible\n//\t\tshuffler for testint the functionality in the tests,\n//\t\twhilst a random shuffler in a real game\n\nfunction getRandomIndexBetween(min, max) {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nmodule.exports = function generateComputerOpponentWith (definitions) {\n\treturn {\n\t\tchooseSymbol: function () {\n\t\t\tvar chosen = getRandomIndexBetween(0, definitions.length-1);\n\t\t\treturn definitions[chosen].symbol;\n\t\t}\n\t};\n};\n",
    "'use strict';\n\nvar generateComparatorWith = require('./symbol/comparator/factory');\nvar generateDecoratorWith = require('./outcome-decorator-factory');\nvar validate = require('./symbol/list/validator');\n\nmodule.exports = function gameFactory (definitions) {\n\n\tvalidate(definitions);\n\n\tvar compare = generateComparatorWith(definitions, validate);\n\tvar decorate = generateDecoratorWith(definitions);\n\n\tvar outcome;\n\tvar message;\n\n\treturn {\n\t\tplay: function (symbolOne, symbolTwo) {\n\t\t\toutcome = compare(symbolOne, symbolTwo);\n\t\t\tmessage = decorate(outcome, symbolOne, symbolTwo);\n\t\t},\n\t\toutcome: function () {\n\t\t\treturn outcome;\n\t\t},\n\t\tmessage: function () {\n\t\t\treturn message;\n\t\t}\n\t};\n};\n",
    "'use strict';\n\nvar generateGameWith = require('./game-factory');\nvar generateComputerOpponentWith = require('./computer-factory');\n\nvar symbolDefinitions = [\n\t{\n\t\tsymbol: 'rock',\n\t\tbeats: [{\n\t\t\tsymbol: 'scissors',\n\t\t\tmessage: 'rock crushes scissors'\n\t\t}]\n\t}, {\n\t\tsymbol: 'paper',\n\t\tbeats: [{\n\t\t\tsymbol: 'rock',\n\t\t\tmessage: 'paper covers rock'\n\t\t}]\n\t}, {\n\t\tsymbol: 'scissors',\n\t\tbeats: [{\n\t\t\tsymbol: 'paper',\n\t\t\tmessage: 'scissors cut paper'\n\t\t}]\n\t}\n];\n\nvar select = document.querySelector('.available-symbols');\nselect.addEventListener('change', function (event) {\n\tvar selectedIndex = event.target.selectedIndex;\n\tvar chosenSymbol = event.target.value;\n\tif (selectedIndex > 0) {\n\t\tplayAgainstComputer(chosenSymbol);\n\t}\n});\n\nvar button = document.querySelector('button');\nbutton.addEventListener('click', computerVsComputer);\n\nvar computerChoice = document.querySelector('.outcome h3');\nvar message = document.querySelector('.outcome p');\nvar outcome = document.querySelector('.outcome h1');\n\nfunction playAgainstComputer (s1) {\n\tvar game = generateGameWith(symbolDefinitions);\n\tvar computer = generateComputerOpponentWith(symbolDefinitions);\n\tvar s2 = computer.chooseSymbol();\n\n\tgame.play(s1, s2);\n\n\tvar playerMessage;\n\n\tswitch (game.outcome()) {\n\tcase 1:\n\t\tplayerMessage = 'Congrats, you won! :)';\n\t\tbreak;\n\tcase 2:\n\t\tplayerMessage = 'You lost :( better luck next time!';\n\t\tbreak;\n\tcase 0:\n\t\tplayerMessage = 'It\\'s a tie! Play again?';\n\t\tbreak;\n\t}\n\n\tcomputerChoice.textContent = 'The computer has chosen '+s2;\n\tmessage.textContent = game.message();\n\toutcome.textContent = playerMessage;\n\n\tselect.selectedIndex = 0;\n}\n\nfunction computerVsComputer () {\n\tvar game = generateGameWith(symbolDefinitions);\n\tvar computer1 = generateComputerOpponentWith(symbolDefinitions);\n\tvar computer2 = generateComputerOpponentWith(symbolDefinitions);\n\tvar s1 = computer1.chooseSymbol();\n\tvar s2 = computer2.chooseSymbol();\n\n\tgame.play(s1, s2);\n\n\tvar playerMessage;\n\n\tswitch (game.outcome()) {\n\tcase 1:\n\t\tplayerMessage = 'First computer won!';\n\t\tbreak;\n\tcase 2:\n\t\tplayerMessage = 'Second computer won!';\n\t\tbreak;\n\tcase 0:\n\t\tplayerMessage = 'It\\'s a tie! Play again? Click the button!';\n\t\tbreak;\n\t}\n\n\tcomputerChoice.textContent = 'The computer1 has chosen '+s1+', computer2 has chosen '+s2;\n\tmessage.textContent = game.message();\n\toutcome.textContent = playerMessage;\n}\n",
    "'use strict';\n\nvar generateFinderWith = require('./symbol/finder-factory');\n\nmodule.exports = function generateDecoratorWith (definitions) {\n\treturn function decorator (outcome, symbolOne, symbolTwo) {\n\t\tif (outcome === 0) {\n\t\t\treturn 'tie!';\n\t\t}\n\t\tvar winner = outcome === 1 ? symbolOne : symbolTwo;\n\t\tvar loser = outcome === 2 ? symbolOne : symbolTwo;\n\n\t\tvar findWinningDefinition = generateFinderWith(definitions);\n\t\tvar winningDefinition = findWinningDefinition(winner);\n\n\t\tvar findBeatedDefinition = generateFinderWith(winningDefinition.beats);\n\t\tvar beated = findBeatedDefinition(loser);\n\n\t\tvar message = beated.message;\n\n\t\treturn winner+' has won, '+message+'!';\n\t};\n};\n",
    "'use strict';\n\nmodule.exports = {\n\tinvalidArgs: 'invalid arguments, symbols must be strings'\n};\n",
    "'use strict';\n\nvar Symbol = require('../symbol');\nvar errors = require('./errors');\nvar generateFinderWith = require('../finder-factory');\n\nfunction comparatorFactory (symbolDefinitions, validate) {\n\n\tvalidate(symbolDefinitions);\n\n\tvar findBy = generateFinderWith(symbolDefinitions);\n\n\tfunction symbol (name) {\n\t\tvar definition = findBy(name);\n\t\treturn new Symbol(definition);\n\t}\n\n\treturn function compare (symbolOne, symbolTwo) {\n\t\tif (typeof symbolOne !== 'string' || typeof symbolTwo !== 'string') {\n\t\t\tthrow new Error(errors.invalidArgs);\n\t\t}\n\n\t\tif (symbol(symbolOne).beats(symbolTwo)) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (symbol(symbolTwo).beats(symbolOne)) {\n\t\t\treturn 2;\n\t\t}\n\n\t\treturn 0;\n\t};\n}\n\nmodule.exports = comparatorFactory;\n",
    "'use strict';\n\nmodule.exports = {\n\tinvalidType: 'every symbol must be an object',\n\tname: {\n\t\tmissing: 'every symbol must have a name',\n\t\tinvalidType: 'every symbol name must be a string'\n\t},\n\tbeats: {\n\t\tmissing: 'every symbol must define a list beatable symbols',\n\t\tinvalidType: 'list of beatable symbols must be an Array',\n\t\tempty: 'every symbol must define at least one beatable symbol',\n\t\tnonExistentSymbol: 'every symbol must only define existing symbols as beatable'\n\t},\n\tbeatable: {\n\t\tinvalidType: 'every beatable symbol definition must be an object',\n\t\tmissingReference: 'every beatable symbol definition must refere to a symbol',\n\t\tmissingMessage: 'every beatable symbol definition must define a winning message'\n\t}\n};\n",
    "'use strict';\n\nvar errors = require('./errors');\n\nmodule.exports = function validate (definition) {\n\tif (typeof definition !== 'object') {\n\t\tthrow new Error(errors.invalidType);\n\t}\n\n\tif (typeof definition.symbol === 'undefined') {\n\t\tthrow new Error(errors.name.missing);\n\t}\n\n\tif (typeof definition.symbol !== 'string') {\n\t\tthrow new Error(errors.name.invalidType);\n\t}\n\n\tif (typeof definition.beats === 'undefined') {\n\t\tthrow new Error(errors.beats.missing);\n\t}\n\n\tif (!(definition.beats instanceof Array)) {\n\t\tthrow new Error(errors.beats.invalidType);\n\t}\n\n\tif (definition.beats.length === 0) {\n\t\tthrow new Error(errors.beats.empty);\n\t}\n\n\tdefinition.beats.forEach(function (beatable) {\n\t\tif (typeof beatable !== 'object') {\n\t\t\tthrow new Error(errors.beatable.invalidType);\n\t\t}\n\n\t\tif (typeof beatable.symbol === 'undefined') {\n\t\t\tthrow new Error(errors.beatable.missingReference);\n\t\t}\n\n\t\tif (typeof beatable.message === 'undefined') {\n\t\t\tthrow new Error(errors.beatable.missingMessage);\n\t\t}\n\t});\n\n\treturn true;\n};\n",
    "'use strict';\n\nmodule.exports = function generateFinderWith (definitions) {\n\treturn function findBy (name) {\n\t\treturn definitions.filter(function (definition) {\n\t\t\treturn definition.symbol === name;\n\t\t})[0];\n\t};\n};\n",
    "'use strict';\n\nmodule.exports = {\n\tinvalidType: 'symbol list must be an Array',\n\tempty: 'symbol list must contain at least one symbol definition',\n\tsymbol: {\n\t\tbeats: {\n\t\t\tnonExistentSymbol: 'each symbol definition must refer to existing symbols as beatable'\n\t\t}\n\t}\n};\n",
    "'use strict';\n\nvar validateSymbol = require('../definition/validator');\nvar errors = require('./errors');\n\nmodule.exports = function validate (list) {\n\n\tif (!(list instanceof Array)) {\n\t\tthrow new Error(errors.invalidType);\n\t}\n\n\tvar symbols = Object.keys(list);\n\n\tif (symbols.length === 0) {\n\t\tthrow new Error(errors.empty);\n\t}\n\n\tfunction exists(symbol) {\n\t\treturn list.some(function (definition) {\n\t\t\treturn definition.symbol === symbol;\n\t\t});\n\t}\n\n\tsymbols.forEach(function (symbol) {\n\t\tvar definition = list[symbol];\n\n\t\tvalidateSymbol(definition);\n\n\t\tvar nonExistentSymbolUsed = definition.beats.some(function (beatable) {\n\t\t\treturn !exists(beatable.symbol);\n\t\t});\n\n\t\tif (nonExistentSymbolUsed) {\n\t\t\tthrow new Error(errors.symbol.beats.nonExistentSymbol);\n\t\t}\n\t});\n\n\treturn true;\n};\n",
    "'use strict';\n\nvar validate = require('./definition/validator');\n\nfunction Symbol (definition) {\n\tvalidate(definition);\n\tthis.definition = definition;\n}\n\nSymbol.prototype.beats = function beats (symbol) {\n\treturn this.definition.beats.some(function (beatable) {\n\t\treturn beatable.symbol === symbol;\n\t});\n};\n\nmodule.exports = Symbol;\n"
  ]
}